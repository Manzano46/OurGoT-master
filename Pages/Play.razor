@using OurGoT.Pages
@using System.Timers
@implements IDisposable

@page "/Play2"

<div class = "Info">
<h3>Player: @CurrentPlayer.Name</h3>
<h3>Money: @CurrentPlayer.Money</h3>
<p>@Phase @Moves</p>
<p>@MessegeAction</p>
@if(SelectedCardCamp.Name != "*")
{
<p>My unit: @SelectedCardCamp.Name</p>
}
else 
{
    @if(SelectedCardHand.Name != "*")
    {
        <p>My unit: @SelectedCardHand.Name</p>
    }
}
<p>Other unit : @Position.Name</p>
<h3>Turn: @turn</h3>

</div>


@if(Winner != "")
{
    <text-center class = "Head Up">Winner is @Winner</text-center>
}

<div class="Hand" style="height=(@height)px">
    @foreach(var _card in CurrentPlayer.Hand)
    {
        CardModel cardmodel = new CardModel {card = _card, Opacity = _card.Conditions[0].Evaluate() > 0 };
        height = CurrentPlayer.Hand.Count() * 100;
        <Card CardModel = "cardmodel" Resize = "true" OnMouseOver="(()=>MouseOver(_card))" OnMouseClick="(()=>SelectCardHand(_card))"/>
    }
</div>

<div class="Tab Tab_Picture">
    @foreach(var x in gridModels)
    {
        string aux = "";
        
        x.Card = Tab[x.Idx, x.Idy];

        foreach(var y in NextPlayer.CampCards)
        {
            if(y.Name == x.Card.Name)
            {
                aux = "Enemy";
            }
        }
        foreach(var y in CurrentPlayer.CampCards)
        {
            if(y.Name == x.Card.Name)
            {
                aux = "Ally";
            }
        }
        x.Site = aux;
        @if(Tab[x.Idx,x.Idy].Name == "*")
        {
            x.IsInvisible = true;
        }
        else
        {
            x.IsInvisible = false;
        }
      
         <Grid GridModel="x"  OnMouseOver="(()=>MouseOver(x.Card))" OnMouseDClick="(()=>SelectCardAction(x.Card))" OnMouseClick="(()=>SelectCardCamp(x.Card))"/>   
      
     }
</div>

 <div class="Showing">
 <Card CardModel = "@Show" Resize = "false" STYLE = "Bigger" />
 @if(SelectedCardCamp.Name != "*")
{
        <div class="Powers">
            <h2>Powers</h2>
            <select style="height=50 width=50" @bind = "Option">
                
            @for(int i=0;i<SelectedCardCamp.Powers.Count();i++)
            {
                @if(i == 0)
                    {
                        <option value = "@(-1)"> @(-1)</option>
                    }
                    else
                    {
                          @if(SelectedCardCamp.Conditions[i].Evaluate() > 0 && SelectedCardCamp.Used[i] == false)
                                {
                                    <option value = "@i"> @i </option>
                                }
                    }
                  
            }
            </select> 
        </div>
}
 </div>
 
 <button @onclick="Change" class="UP btn">End Phase</button>

<select class="powers UP Correct" style="height=70 width =70" @bind="@ReturnalCard">
        @foreach(var c in Graveyard)
        {
            <option value = "@c.Name" >@c.Name</option>
        }
    </select>    

<select class="powers UP Correct" style="height=70 width =70" @bind="@SelectedPlayer">
            <option value = "@CurrentPlayer.Name" >@CurrentPlayer.Name</option>
            <option value = "@NextPlayer.Name">@NextPlayer.Name</option>
    </select>    




@code
{
    public static string Phase = "";
    public static Player CurrentPlayer = new Player("");
    public static Player NextPlayer = new Player("");
    public static int turn = -1;
    public static List<Card> Graveyard = new List<Card>();
    public static Dictionary<Expression, int> TimeActions = new Dictionary<Expression, int>();
    public static Context Context = new Context();
    public static Card[,] Tab = new Card[10, 10];
    public static List<GridModel> gridModels { get; set; } = new List<GridModel>();
    public static List<CardModel> cardModels { get; set; } = new List<CardModel>();
    public static List<Card> deck = new List<Card>();
    public static CardModel Show = new CardModel{id = 69,Opacity = true,card = new Card()};
    public static string Message = "";
    public static string MessegeAction = "";
    public static  Timer timer = new Timer(5000);
    public static Card SelectedCardHand = new Card();
    public static Card Position = new Card();
    public static Card SelectedCardCamp = new Card();
    public static int Moves = 0;
    public static bool OnSacrifice = false;
    public static bool OnTrade = false;
    public static string SelectedPlayer = "*";
    public static string ReturnalCard = "*";
    public static string Winner = "";
    public static int height;
    public static int Option = -1;
    public static bool OnAction = false;
    public static int x;
    public static int y;
    public static int Selection;
    public static List<int> Available = new List<int>();
    public static Card Aux = new Card();

    private void SelectCardAction(Card card)
    {
        Position = card;   
    }
    public void Dispose()
    {
        if (timer != null)
            timer.Dispose();
    }
    private void MouseOver(Card card)
    {
        Show = new CardModel {id=100, Opacity = true, card = card };
    }
    private void SelectCardHand(Card card)
    {       
        if(card.Conditions[0].Evaluate() > 0)
            SelectedCardHand = card;
    }
    private void SelectCardCamp(Card card)
    {
        if (OnAction || Phase == "Draw") 
            return;
        if(card.Name == "*")
            return;
        foreach (var x in NextPlayer.CampCards)
            if (x.Name == card.Name)
                return;
        SelectedCardCamp = card;
    }

    public void Change()
    {
        if(Phase == "End")
        {
            Phase = "Draw";
            Player aux = CurrentPlayer;
            CurrentPlayer = NextPlayer;
            NextPlayer = aux; 
            if(CurrentPlayer is VirtualPlayer)
            Change(); 
        }
        else if(Phase == "Draw")
        {
            Draw();
            Phase = "Invocation";
            if(CurrentPlayer is VirtualPlayer)
            Change();
        }
        else if(Phase == "Invocation")
        {
            Phase = "Move";
            if(CurrentPlayer is VirtualPlayer)
            {
                Context.Save(CurrentPlayer.Name + ".Money", CurrentPlayer.Money);
                Context.Save(CurrentPlayer.Name + ".Hand", CurrentPlayer.Hand.Count());
                Context.Save(CurrentPlayer.Name + ".CampCards", CurrentPlayer.CampCards.Count());
                
                Available = CurrentPlayer.AvailableCards();
              
                if (Available.Count() != 0)
                {
                    x = y = -1;
                    CurrentPlayer.Choose_Card();
                }
                
                if (Selection != -1)
                {

                    while (!Methods.Validate_Position(x, y, Tab, turn, true) || CurrentPlayer.Hand[Selection].Conditions[0].Evaluate() == 0)
                    {
                        CurrentPlayer.Choose_Position(true, turn);
                    }

                    CurrentPlayer.Money -= CurrentPlayer.Hand[Selection].Cost;
                    Context.Save(CurrentPlayer.Name + ".Money", CurrentPlayer.Money);
                    Tab[x, y] = CurrentPlayer.Hand[Selection];
                    CurrentPlayer.CampCards.Add(CurrentPlayer.Hand[Selection]);
                    CurrentPlayer.Hand.RemoveAt(Selection);
                    CurrentPlayer.CampCards[CurrentPlayer.CampCards.Count() - 1].Posx = x;
                    CurrentPlayer.CampCards[CurrentPlayer.CampCards.Count() - 1].Posy = y;
                    Aux = CurrentPlayer.CampCards[CurrentPlayer.CampCards.Count() - 1];
                    Context.Save(CurrentPlayer.Name + ".CampCards", CurrentPlayer.CampCards.Count());
                    Context.Save(CurrentPlayer.Name + ".Hand", CurrentPlayer.Hand.Count());
                    Context.Save(Aux.Name + ".Posx", Aux.Posx);
                    Context.Save(Aux.Name + ".Posy", Aux.Posy);
                }
                Change();
            }
            else
            {
                Invocation();
                foreach (var x in CurrentPlayer.CampCards)
                            x.Moved = false;
                Moves = CurrentPlayer.CampCards.Count();
            }
            
        }
        else if(Phase == "Move")
        {
            if(CurrentPlayer is VirtualPlayer)
            {
                for (int i = 0; i < CurrentPlayer.CampCards.Count(); i++)
                {
                    Aux = CurrentPlayer.CampCards[i];
                    CurrentPlayer.Money -= Aux.Cost / 10;
                    Context.Save(CurrentPlayer.Name + ".Money", CurrentPlayer.Money);
                    do
                    {
                        if (Aux.Range == 0)
                        {
                            x = -1;
                            break;
                        }
                        CurrentPlayer.Choose_Position(false, turn);
                        if (x == -1) break;
                        if (x == Aux.Posx && y == Aux.Posy)
                        {
                            x = -1;
                            break;
                        }
                    }
                    while (!Methods.Validate_Position(x, y, Tab, turn, false)
                    || Methods.Distance(x, y, Aux.Posx, Aux.Posy) > Aux.Range);

                    if (x != -1)
                    {
                        Tab[x, y] = Aux;
                        Tab[Aux.Posx, Aux.Posy] = new Card();
                        Tab[Aux.Posx, Aux.Posy].Posx = Aux.Posx;
                        Tab[Aux.Posx, Aux.Posy].Posy = Aux.Posy;
                        Aux.Posx = x;
                        Aux.Posy = y;
                        Context.Save(Aux.Name + ".Posx", Aux.Posx);
                        Context.Save(Aux.Name + ".Posy", Aux.Posy);
                    }
                
                    bool[] used = new bool[Aux.Powers.Count()];
                    Selection = -1;
                    do
                    {
                        CurrentPlayer.Choose_Power(Aux, used);
                        if (Selection == -1)
                            break;
                        used[Selection] = true;
                        if (Aux.Conditions[Selection].Evaluate() > 0)
                            Aux.Powers[Selection].Evaluate();
                    } while (Selection != -1);
                }
                Phase = "Battle";
                Moves = 0;
                Change();
            }
            else
            {
                if(Moves <= 0)
                {
                    foreach (var x in CurrentPlayer.CampCards)
                        for (int i = 0; i < x.Used.Count(); i++)
                            x.Used[i] = false;
                    Phase = "Battle";
                    Moves = 0;
                    foreach(var x in CurrentPlayer.CampCards)
                        foreach(var y in x.Conditions)
                            if(y.Evaluate() > 0)
                                Moves++;
                    Moves -= CurrentPlayer.CampCards.Count();
                }
                else
                {
                    Moves--;
                    Move();
                }
            }
        } 
        else
        {
            if(Moves <= 0)
            {
                Phase = "End";
                gridModels = Enumerable.Reverse(gridModels).ToList();
                turn++;
                Console.WriteLine(111);
                Change();
                
            }
            else
            {
                Moves--;
                Battle();
            }
        }
    }


    public void Draw()
    {
        if(deck.Count() == 0 || CurrentPlayer.Money <= 0)
            Methods.EndGame();
        else
            CurrentPlayer.Draw(deck,Methods.GetRandom(0,deck.Count()-1));
        while (CurrentPlayer.CardLim < CurrentPlayer.Hand.Count())
            {
                Graveyard.Add(CurrentPlayer.Hand[0]);
                CurrentPlayer.Hand.RemoveAt(0);
            }
        Context.Save(CurrentPlayer.Name + ".Hand", CurrentPlayer.Hand.Count());
        StateHasChanged();
    }

    public void Invocation()
    {
        if(Position.Name == "*" && SelectedCardHand.Name != "*")
        {
            if(Methods.Validate_Position(Position.Posx, Position.Posy, Tab, turn, true))
            {
                CurrentPlayer.Hand.Remove(SelectedCardHand);
                Tab[Position.Posx,Position.Posy] = SelectedCardHand;
                Tab[Position.Posx, Position.Posy].Posx = Position.Posx;
                Tab[Position.Posx, Position.Posy].Posy = Position.Posy;
                CurrentPlayer.CampCards.Add(SelectedCardHand);
                CurrentPlayer.Money -= SelectedCardHand.Cost;
                Context.Save(CurrentPlayer.Name + ".Money", CurrentPlayer.Money);
                Context.Save(CurrentPlayer.Name + ".Hand", CurrentPlayer.Hand.Count());
                Context.Save(CurrentPlayer.Name + ".CampCards", CurrentPlayer.CampCards.Count());
                Context.Save(SelectedCardHand.Name + ".Posx", SelectedCardHand.Posx);
                Context.Save(SelectedCardHand.Name + ".Posy", SelectedCardHand.Posy);
                
            }
        }
        SelectedCardHand = new Card();
        Position = new Card();
        Position.Name = "**";
        StateHasChanged();
    }

    public void Move()
    {
        if (Methods.Distance(Position.Posx,Position.Posy,SelectedCardCamp.Posx,SelectedCardCamp.Posy) > SelectedCardCamp.Range)
            return;
        if (Position.Name != "*")
            return;
        if (SelectedCardCamp.Moved)
            return;

        int newx = Position.Posx;
        int newy = Position.Posy;
        int posx = SelectedCardCamp.Posx;
        int posy = SelectedCardCamp.Posy;
        CurrentPlayer.Money -= SelectedCardCamp.Cost/10;
        Context.Save(SelectedCardCamp.Name + ".Posx", newx);
        Context.Save(SelectedCardCamp.Name + ".Posy", newy);
        Context.Save(CurrentPlayer.Name + ".Money", CurrentPlayer.Money);
        Tab[newx, newy] = SelectedCardCamp;
        Tab[posx, posy] = new Card();

        Tab[posx,posy].Posx = posx;
        Tab[posx,posy].Posy = posy;

        Tab[newx, newy].Posx = newx;
        Tab[newx, newy].Posy = newy;
        Tab[newx, newy].Moved = true;

        Position = new Card();
        Position.Name = "**";
        SelectedCardCamp = new Card();
        
        StateHasChanged();
    }

    public void Battle()
    {
        if (Option != -1)
            {
                OnAction = true;
                SelectedCardCamp.Powers[Option].Evaluate();
                SelectedCardCamp.Used[Option] = true;
                Option = -1;
                OnAction = false;
                Position = new Card();
                Position.Name = "**";
                SelectedCardCamp = new Card();
                SelectedPlayer = "*";
                ReturnalCard = "*";
                StateHasChanged();
            }
    }
    
    protected override async void OnInitialized()
    {
        
        Context.Save(CurrentPlayer.Name + ".Money", CurrentPlayer.Money);
        Context.Save(NextPlayer.Name + ".Money", NextPlayer.Money);
        Context.Save(CurrentPlayer.Name + ".Hand", CurrentPlayer.Hand.Count());
        Context.Save(NextPlayer.Name + ".Hand", NextPlayer.Hand.Count());
        Context.Save(CurrentPlayer.Name + ".CampCards", CurrentPlayer.CampCards.Count());
        Context.Save(NextPlayer.Name + ".CampCards", NextPlayer.CampCards.Count());
        deck = Deck.ReadDeck();
        for (int i = 0; i < 10; i++)
            for (int j = 0; j < 10; j++)
            {
                Tab[i, j] = new Card();
                Tab[i, j].Posx = i;
                Tab[i, j].Posy = j;
                gridModels.Add(new GridModel { Card = Tab[i,j] ,Idx = j, Idy = i});
            }

        for (int i = 0; i < 3; i++)
        {
            CurrentPlayer.Draw(deck, Methods.GetRandom(0, deck.Count() - 1));
            NextPlayer.Draw(deck, Methods.GetRandom(0, deck.Count() - 1));
        }
        Position.Name = "**";
        Phase = "Draw";
        if(CurrentPlayer is VirtualPlayer)
        Change();
    }
}
